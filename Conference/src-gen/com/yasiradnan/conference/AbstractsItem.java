package com.yasiradnan.conference;

import java.util.List;
import com.yasiradnan.conference.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ABSTRACTS_ITEM.
 */
public class AbstractsItem {

    private Long id;
    /** Not-null value. */
    private String Correspondence;
    /** Not-null value. */
    private String title;
    /** Not-null value. */
    private String url;
    /** Not-null value. */
    private String text;
    /** Not-null value. */
    private String type;
    /** Not-null value. */
    private String topic;
    /** Not-null value. */
    private String coi;
    /** Not-null value. */
    private String cite;
    private Long absAuthorId;
    private Long absAffiliationNameId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AbstractsItemDao myDao;

    private AbstractAuthor abstractAuthor;
    private Long abstractAuthor__resolvedKey;

    private List<AbsAffiliationName> absAffiliationNameList;

    public AbstractsItem() {
    }

    public AbstractsItem(Long id) {
        this.id = id;
    }

    public AbstractsItem(Long id, String Correspondence, String title, String url, String text, String type, String topic, String coi, String cite, Long absAuthorId, Long absAffiliationNameId) {
        this.id = id;
        this.Correspondence = Correspondence;
        this.title = title;
        this.url = url;
        this.text = text;
        this.type = type;
        this.topic = topic;
        this.coi = coi;
        this.cite = cite;
        this.absAuthorId = absAuthorId;
        this.absAffiliationNameId = absAffiliationNameId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAbstractsItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getCorrespondence() {
        return Correspondence;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCorrespondence(String Correspondence) {
        this.Correspondence = Correspondence;
    }

    /** Not-null value. */
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String title) {
        this.title = title;
    }

    /** Not-null value. */
    public String getUrl() {
        return url;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUrl(String url) {
        this.url = url;
    }

    /** Not-null value. */
    public String getText() {
        return text;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setText(String text) {
        this.text = text;
    }

    /** Not-null value. */
    public String getType() {
        return type;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setType(String type) {
        this.type = type;
    }

    /** Not-null value. */
    public String getTopic() {
        return topic;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTopic(String topic) {
        this.topic = topic;
    }

    /** Not-null value. */
    public String getCoi() {
        return coi;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCoi(String coi) {
        this.coi = coi;
    }

    /** Not-null value. */
    public String getCite() {
        return cite;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCite(String cite) {
        this.cite = cite;
    }

    public Long getAbsAuthorId() {
        return absAuthorId;
    }

    public void setAbsAuthorId(Long absAuthorId) {
        this.absAuthorId = absAuthorId;
    }

    public Long getAbsAffiliationNameId() {
        return absAffiliationNameId;
    }

    public void setAbsAffiliationNameId(Long absAffiliationNameId) {
        this.absAffiliationNameId = absAffiliationNameId;
    }

    /** To-one relationship, resolved on first access. */
    public AbstractAuthor getAbstractAuthor() {
        if (abstractAuthor__resolvedKey == null || !abstractAuthor__resolvedKey.equals(absAuthorId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AbstractAuthorDao targetDao = daoSession.getAbstractAuthorDao();
            abstractAuthor = targetDao.load(absAuthorId);
            abstractAuthor__resolvedKey = absAuthorId;
        }
        return abstractAuthor;
    }

    public void setAbstractAuthor(AbstractAuthor abstractAuthor) {
        this.abstractAuthor = abstractAuthor;
        absAuthorId = abstractAuthor == null ? null : abstractAuthor.getId();
        abstractAuthor__resolvedKey = absAuthorId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<AbsAffiliationName> getAbsAffiliationNameList() {
        if (absAffiliationNameList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AbsAffiliationNameDao targetDao = daoSession.getAbsAffiliationNameDao();
            absAffiliationNameList = targetDao._queryAbstractsItem_AbsAffiliationNameList(id);
        }
        return absAffiliationNameList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAbsAffiliationNameList() {
        absAffiliationNameList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
