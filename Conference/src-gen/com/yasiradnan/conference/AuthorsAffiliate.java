package com.yasiradnan.conference;

import com.yasiradnan.conference.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table AUTHORS_AFFILIATE.
 */
public class AuthorsAffiliate {

    private long abstractauthorId;
    private long abstractaffiliationId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AuthorsAffiliateDao myDao;

    private AbstractAuthor abstractAuthor;
    private Long abstractAuthor__resolvedKey;

    private AbstractAffiliation abstractAffiliation;
    private Long abstractAffiliation__resolvedKey;


    public AuthorsAffiliate() {
    }

    public AuthorsAffiliate(long abstractauthorId, long abstractaffiliationId) {
        this.abstractauthorId = abstractauthorId;
        this.abstractaffiliationId = abstractaffiliationId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAuthorsAffiliateDao() : null;
    }

    public long getAbstractauthorId() {
        return abstractauthorId;
    }

    public void setAbstractauthorId(long abstractauthorId) {
        this.abstractauthorId = abstractauthorId;
    }

    public long getAbstractaffiliationId() {
        return abstractaffiliationId;
    }

    public void setAbstractaffiliationId(long abstractaffiliationId) {
        this.abstractaffiliationId = abstractaffiliationId;
    }

    /** To-one relationship, resolved on first access. */
    public AbstractAuthor getAbstractAuthor() {
        if (abstractAuthor__resolvedKey == null || !abstractAuthor__resolvedKey.equals(abstractauthorId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AbstractAuthorDao targetDao = daoSession.getAbstractAuthorDao();
            abstractAuthor = targetDao.load(abstractauthorId);
            abstractAuthor__resolvedKey = abstractauthorId;
        }
        return abstractAuthor;
    }

    public void setAbstractAuthor(AbstractAuthor abstractAuthor) {
        if (abstractAuthor == null) {
            throw new DaoException("To-one property 'abstractauthorId' has not-null constraint; cannot set to-one to null");
        }
        this.abstractAuthor = abstractAuthor;
        abstractauthorId = abstractAuthor.getId();
        abstractAuthor__resolvedKey = abstractauthorId;
    }

    /** To-one relationship, resolved on first access. */
    public AbstractAffiliation getAbstractAffiliation() {
        if (abstractAffiliation__resolvedKey == null || !abstractAffiliation__resolvedKey.equals(abstractaffiliationId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AbstractAffiliationDao targetDao = daoSession.getAbstractAffiliationDao();
            abstractAffiliation = targetDao.load(abstractaffiliationId);
            abstractAffiliation__resolvedKey = abstractaffiliationId;
        }
        return abstractAffiliation;
    }

    public void setAbstractAffiliation(AbstractAffiliation abstractAffiliation) {
        if (abstractAffiliation == null) {
            throw new DaoException("To-one property 'abstractaffiliationId' has not-null constraint; cannot set to-one to null");
        }
        this.abstractAffiliation = abstractAffiliation;
        abstractaffiliationId = abstractAffiliation.getId();
        abstractAffiliation__resolvedKey = abstractaffiliationId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
