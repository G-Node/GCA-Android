package com.yasiradnan.conference;

import com.yasiradnan.conference.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ABSTRACT_AUTHOR.
 */
public class AbstractAuthor {

    private Long id;
    /** Not-null value. */
    private String name;
    private Boolean Is_Corresponding;
    private Long abstractsitemId;
    private Long absAffiliationId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AbstractAuthorDao myDao;

    private AbstractsItem abstractsItem;
    private Long abstractsItem__resolvedKey;

    private AbstractAffiliation abstractAffiliation;
    private Long abstractAffiliation__resolvedKey;


    public AbstractAuthor() {
    }

    public AbstractAuthor(Long id) {
        this.id = id;
    }

    public AbstractAuthor(Long id, String name, Boolean Is_Corresponding, Long abstractsitemId, Long absAffiliationId) {
        this.id = id;
        this.name = name;
        this.Is_Corresponding = Is_Corresponding;
        this.abstractsitemId = abstractsitemId;
        this.absAffiliationId = absAffiliationId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAbstractAuthorDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public Boolean getIs_Corresponding() {
        return Is_Corresponding;
    }

    public void setIs_Corresponding(Boolean Is_Corresponding) {
        this.Is_Corresponding = Is_Corresponding;
    }

    public Long getAbstractsitemId() {
        return abstractsitemId;
    }

    public void setAbstractsitemId(Long abstractsitemId) {
        this.abstractsitemId = abstractsitemId;
    }

    public Long getAbsAffiliationId() {
        return absAffiliationId;
    }

    public void setAbsAffiliationId(Long absAffiliationId) {
        this.absAffiliationId = absAffiliationId;
    }

    /** To-one relationship, resolved on first access. */
    public AbstractsItem getAbstractsItem() {
        if (abstractsItem__resolvedKey == null || !abstractsItem__resolvedKey.equals(abstractsitemId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AbstractsItemDao targetDao = daoSession.getAbstractsItemDao();
            abstractsItem = targetDao.load(abstractsitemId);
            abstractsItem__resolvedKey = abstractsitemId;
        }
        return abstractsItem;
    }

    public void setAbstractsItem(AbstractsItem abstractsItem) {
        this.abstractsItem = abstractsItem;
        abstractsitemId = abstractsItem == null ? null : abstractsItem.getId();
        abstractsItem__resolvedKey = abstractsitemId;
    }

    /** To-one relationship, resolved on first access. */
    public AbstractAffiliation getAbstractAffiliation() {
        if (abstractAffiliation__resolvedKey == null || !abstractAffiliation__resolvedKey.equals(absAffiliationId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AbstractAffiliationDao targetDao = daoSession.getAbstractAffiliationDao();
            abstractAffiliation = targetDao.load(absAffiliationId);
            abstractAffiliation__resolvedKey = absAffiliationId;
        }
        return abstractAffiliation;
    }

    public void setAbstractAffiliation(AbstractAffiliation abstractAffiliation) {
        this.abstractAffiliation = abstractAffiliation;
        absAffiliationId = abstractAffiliation == null ? null : abstractAffiliation.getId();
        abstractAffiliation__resolvedKey = absAffiliationId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
