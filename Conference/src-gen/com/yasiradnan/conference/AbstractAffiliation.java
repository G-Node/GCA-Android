package com.yasiradnan.conference;

import com.yasiradnan.conference.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ABSTRACT_AFFILIATION.
 */
public class AbstractAffiliation {

    private Long id;
    private Integer affiliationNumber;
    private long absAuthorId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AbstractAffiliationDao myDao;

    private AbstractAuthor abstractAuthor;
    private Long abstractAuthor__resolvedKey;


    public AbstractAffiliation() {
    }

    public AbstractAffiliation(Long id) {
        this.id = id;
    }

    public AbstractAffiliation(Long id, Integer affiliationNumber, long absAuthorId) {
        this.id = id;
        this.affiliationNumber = affiliationNumber;
        this.absAuthorId = absAuthorId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAbstractAffiliationDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getAffiliationNumber() {
        return affiliationNumber;
    }

    public void setAffiliationNumber(Integer affiliationNumber) {
        this.affiliationNumber = affiliationNumber;
    }

    public long getAbsAuthorId() {
        return absAuthorId;
    }

    public void setAbsAuthorId(long absAuthorId) {
        this.absAuthorId = absAuthorId;
    }

    /** To-one relationship, resolved on first access. */
    public AbstractAuthor getAbstractAuthor() {
        if (abstractAuthor__resolvedKey == null || !abstractAuthor__resolvedKey.equals(absAuthorId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AbstractAuthorDao targetDao = daoSession.getAbstractAuthorDao();
            abstractAuthor = targetDao.load(absAuthorId);
            abstractAuthor__resolvedKey = absAuthorId;
        }
        return abstractAuthor;
    }

    public void setAbstractAuthor(AbstractAuthor abstractAuthor) {
        if (abstractAuthor == null) {
            throw new DaoException("To-one property 'absAuthorId' has not-null constraint; cannot set to-one to null");
        }
        this.abstractAuthor = abstractAuthor;
        absAuthorId = abstractAuthor.getId();
        abstractAuthor__resolvedKey = absAuthorId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
