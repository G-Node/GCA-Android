package com.yasiradnan.conference;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.yasiradnan.conference.AbstractsItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ABSTRACTS_ITEM.
*/
public class AbstractsItemDao extends AbstractDao<AbstractsItem, Long> {

    public static final String TABLENAME = "ABSTRACTS_ITEM";

    /**
     * Properties of entity AbstractsItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Correspondence = new Property(1, String.class, "Correspondence", false, "CORRESPONDENCE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Url = new Property(3, String.class, "url", false, "URL");
        public final static Property Text = new Property(4, String.class, "text", false, "TEXT");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Topic = new Property(6, String.class, "topic", false, "TOPIC");
        public final static Property Coi = new Property(7, String.class, "coi", false, "COI");
        public final static Property Cite = new Property(8, String.class, "cite", false, "CITE");
    };


    public AbstractsItemDao(DaoConfig config) {
        super(config);
    }
    
    public AbstractsItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ABSTRACTS_ITEM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CORRESPONDENCE' TEXT NOT NULL ," + // 1: Correspondence
                "'TITLE' TEXT NOT NULL ," + // 2: title
                "'URL' TEXT NOT NULL ," + // 3: url
                "'TEXT' TEXT NOT NULL ," + // 4: text
                "'TYPE' TEXT NOT NULL ," + // 5: type
                "'TOPIC' TEXT NOT NULL ," + // 6: topic
                "'COI' TEXT NOT NULL ," + // 7: coi
                "'CITE' TEXT NOT NULL );"); // 8: cite
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ABSTRACTS_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AbstractsItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCorrespondence());
        stmt.bindString(3, entity.getTitle());
        stmt.bindString(4, entity.getUrl());
        stmt.bindString(5, entity.getText());
        stmt.bindString(6, entity.getType());
        stmt.bindString(7, entity.getTopic());
        stmt.bindString(8, entity.getCoi());
        stmt.bindString(9, entity.getCite());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AbstractsItem readEntity(Cursor cursor, int offset) {
        AbstractsItem entity = new AbstractsItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // Correspondence
            cursor.getString(offset + 2), // title
            cursor.getString(offset + 3), // url
            cursor.getString(offset + 4), // text
            cursor.getString(offset + 5), // type
            cursor.getString(offset + 6), // topic
            cursor.getString(offset + 7), // coi
            cursor.getString(offset + 8) // cite
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AbstractsItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCorrespondence(cursor.getString(offset + 1));
        entity.setTitle(cursor.getString(offset + 2));
        entity.setUrl(cursor.getString(offset + 3));
        entity.setText(cursor.getString(offset + 4));
        entity.setType(cursor.getString(offset + 5));
        entity.setTopic(cursor.getString(offset + 6));
        entity.setCoi(cursor.getString(offset + 7));
        entity.setCite(cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AbstractsItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AbstractsItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
